@MainActor
func processDrawing(_ drawing: PKDrawing) {
    print("üñãÔ∏è RecognitionManager: –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∏—Å—É–Ω–∫–∞ –≤ —Ä–µ–∂–∏–º–µ: \(currentMode)")
    
    guard let engine = engineFactory.makeEngine() else {
        print("‚ùå RecognitionManager: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–≤–∏–∂–æ–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
        delegate?.handwritingRecognitionDidComplete(text: "", error: RecognitionError.engineCreationFailed)
        return
    }
    
    DispatchQueue.main.async {
        // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        let strategy = self.getRecognitionStrategy(for: self.currentMode, engine: engine)
        
        print("üî¢ RecognitionManager: –í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: \(strategy)")
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        strategy.recognizeDrawing(drawing) { [weak self] result in
            print("üîÑ RecognitionManager: –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: \(result)")
            switch result {
            case .success(let text):
                self?.delegate?.handwritingRecognitionDidComplete(text: text, error: nil)
            case .failure(let error):
                self?.delegate?.handwritingRecognitionDidComplete(text: "", error: error)
            }
        }
    }
} 